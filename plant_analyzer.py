import os
import math
import json
from PIL import Image
import google.generativeai as genai
from ultralytics import YOLO

# === 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini ===
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if not GOOGLE_API_KEY:
    raise ValueError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_API_KEY")

genai.configure(api_key=GOOGLE_API_KEY)
gemini_model = genai.GenerativeModel('gemini-2.5-flash')

# === 2. –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM ===
PROMPT = """
You are a plant pathology expert. Analyze the provided image and do the following:
1. Identify the plant species.
2. Diagnose any visible disease, pest damage, or nutrient deficiency.
3. If the plant appears healthy, state "No disease detected".

Respond ONLY in valid JSON format with these keys:
{"species": "string", "disease": "string", "confidence": "high|medium|low"}
Do not add any other text or explanation.
"""

# === 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def crop_with_padding(image: Image.Image, bbox, padding_ratio=0.1):
    """–û–±—Ä–µ–∑–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ bounding box —Å –æ—Ç—Å—Ç—É–ø–æ–º."""
    x1, y1, x2, y2 = map(int, bbox)
    w, h = x2 - x1, y2 - y1

    pad_x = int(w * padding_ratio)
    pad_y = int(h * padding_ratio)

    W, H = image.size
    x1_pad = max(0, x1 - pad_x)
    y1_pad = max(0, y1 - pad_y)
    x2_pad = min(W, x2 + pad_x)
    y2_pad = min(H, y2 + pad_y)

    return image.crop((x1_pad, y1_pad, x2_pad, y2_pad))


def select_primary_object(boxes, image_size):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –ø–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–∫–æ—Ä—É: —Ä–∞–∑–º–µ—Ä + —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å.
    :param boxes: —Å–ø–∏—Å–æ–∫ [x1, y1, x2, y2]
    :param image_size: (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞)
    :return: bounding box –≥–ª–∞–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ None
    """
    if not boxes:
        return None

    W, H = image_size
    max_dist = math.sqrt((W / 2) ** 2 + (H / 2) ** 2)  # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –¥–æ —É–≥–ª–∞

    best_box, best_score = None, -1

    for bbox in boxes:
        x1, y1, x2, y2 = bbox
        # –ü–ª–æ—â–∞–¥—å
        area = (x2 - x1) * (y2 - y1)
        norm_area = area / (W * H + 1e-6)

        # –¶–µ–Ω—Ç—Ä bounding box
        box_cx, box_cy = (x1 + x2) / 2, (y1 + y2) / 2
        dist = math.sqrt((box_cx - W / 2) ** 2 + (box_cy - H / 2) ** 2)
        norm_dist = 1 - (dist / (max_dist + 1e-6))

        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä
        score = 0.6 * norm_area + 0.4 * norm_dist

        if score > best_score:
            best_score = score
            best_box = bbox

    return best_box


# === 4. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ ===

def analyze_plant_image(image_path: str, yolo_model_path: str = "yolov8n.pt"):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è: –¥–µ—Ç–µ–∫—Ü–∏—è ‚Üí –≤—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ ‚Üí –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ Gemini.
    """
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    full_image = Image.open(image_path).convert("RGB")

    # –ó–∞–ø—É—Å–∫ YOLO
    yolo_model = YOLO(yolo_model_path)
    results = yolo_model(full_image, verbose=False)

    # –°–±–æ—Ä –≤—Å–µ—Ö bounding boxes —Å confidence >= 0.5
    all_boxes = []
    for result in results:
        for box in result.boxes:
            if box.conf >= 0.5:
                all_boxes.append(box.xyxy[0].tolist())

    if not all_boxes:
        return {"error": "No plants detected with sufficient confidence."}

    # –í—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
    primary_bbox = select_primary_object(all_boxes, full_image.size)
    if primary_bbox is None:
        return {"error": "Could not select primary plant."}

    # –û–±—Ä–µ–∑–∫–∞
    cropped_img = crop_with_padding(full_image, primary_bbox, padding_ratio=0.1)

    # –ó–∞–ø—Ä–æ—Å –∫ Gemini
    try:
        response = gemini_model.generate_content(
            [PROMPT, cropped_img],
            generation_config=genai.GenerationConfig(
                max_output_tokens=200,
                temperature=0.2,
                response_mime_type="application/json"
            )
        )
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON
        result = json.loads(response.text)
        return result
    except Exception as e:
        return {"error": f"LLM failed: {str(e)}"}


# === 5. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===

if __name__ == "__main__":
    import sys

    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python plant_analyzer.py <–ø—É—Ç—å_–∫_—Ñ–æ—Ç–æ.jpg>")
        sys.exit(1)

    image_path = sys.argv[1]
    result = analyze_plant_image(image_path)

    print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
    print(json.dumps(result, indent=2, ensure_ascii=False))