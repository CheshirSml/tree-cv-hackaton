"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö JSON-–∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç YOLO.

–û–ø–∏—Å–∞–Ω–∏–µ:
    –°–∫—Ä–∏–ø—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ö—Ä–∞–Ω—è—â–∏–µ—Å—è –≤ –≤–∏–¥–µ JSON-—Ñ–∞–π–ª–æ–≤
    —Å –∫–ª—é—á–∞–º–∏ "bbox" (–≤ –ø–∏–∫—Å–µ–ª—è—Ö) –∏ "type" (–∏–º—è –∫–ª–∞—Å—Å–∞), –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    YOLO, –ø—Ä–∏–≥–æ–¥–Ω—ã–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤.

    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
      - –ò—â–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π JSON-—Ñ–∞–π–ª —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º (–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json).
      - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –µ–≥–æ —Ä–∞–∑–º–µ—Ä–æ–≤.
      - Bounding box –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ [x1, y1, x2, y2] ‚Üí
        [x_center, y_center, width, height] —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
      - –ö–ª–∞—Å—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω—É–º–µ—Ä—É—é—Ç—Å—è –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É.

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
      - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫: 
          yolo_dataset/
            ‚îú‚îÄ‚îÄ images/train/
            ‚îú‚îÄ‚îÄ images/val/
            ‚îú‚îÄ‚îÄ labels/train/
            ‚îú‚îÄ‚îÄ labels/val/
            ‚îî‚îÄ‚îÄ dataset.yaml
      - –§–∞–π–ª dataset.yaml —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ (—á–∏—Å–ª–æ –∫–ª–∞—Å—Å–æ–≤, –∏—Ö –∏–º–µ–Ω–∞ –∏ –ø—É—Ç–∏).

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ JSON-—Ñ–∞–π–ª–∞ (–ø—Ä–∏–º–µ—Ä):
    {
        "bbox": [100, 150, 300, 400],
        "type": "sanitarka"
    }

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ JSON-—Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–º–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: image.jpg ‚Üî image.json).
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á–∏—Ç–∞–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π PIL (JPEG, PNG –∏ –¥—Ä.).

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
    - Pillow (PIL): pip install Pillow

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    1. –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, JSON-–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ –∏ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.
    2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ split_ratio (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.8 ‚Äî 80% train, 20% val).
    3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç.
"""

import json
from pathlib import Path
import shutil
from PIL import Image
import random


def custom_json_to_yolo(images_dir, jsons_dir, output_dir, split_ratio=0.8):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ JSON-–∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç YOLO.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        images_dir (str –∏–ª–∏ Path): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
        jsons_dir (str –∏–ª–∏ Path): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å JSON-–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏.
        output_dir (str –∏–ª–∏ Path): –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è YOLO-–¥–∞—Ç–∞—Å–µ—Ç–∞.
        split_ratio (float): –î–æ–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏ (–æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –≤–∞–ª–∏–¥–∞—Ü–∏—è).
    """
    images_dir = Path(images_dir)
    jsons_dir = Path(jsons_dir)
    output_dir = Path(output_dir)

    # –ù–∞–π—Ç–∏ –≤—Å–µ JSON-—Ñ–∞–π–ª—ã
    json_files = list(jsons_dir.glob("*.json"))
    if not json_files:
        raise ValueError(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ JSON-—Ñ–∞–π–ª–æ–≤ –≤ {jsons_dir}")

    print(f"–ù–∞–π–¥–µ–Ω–æ JSON-—Ñ–∞–π–ª–æ–≤: {len(json_files)}")

    # –°–±–æ—Ä –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–ª–∞—Å—Å–æ–≤
    valid_data = []
    all_types = set()

    for json_path in json_files:
        try:
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON {json_path}: {e}")
            continue

        if not isinstance(data, dict):
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω {json_path}: JSON –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º")
            continue

        if "bbox" not in data or "type" not in data:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω {json_path}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'bbox' –∏–ª–∏ 'type'")
            continue

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ '.json' —Å –∫–æ–Ω—Ü–∞
        if json_path.name.endswith('.json'):
            img_name = json_path.name[:-5]  # –Ω–∞–ø—Ä–∏–º–µ—Ä: '_9FMvuan7S8.jpg'
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω {json_path}: –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .json")
            continue

        img_path = images_dir / img_name
        if not img_path.exists():
            print(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {img_path}")
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            with Image.open(img_path) as im:
                w, h = im.size
            if w == 0 or h == 0:
                raise ValueError("–ù—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}")
            continue

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        all_types.add(data["type"])
        valid_data.append({
            "json_path": json_path,
            "img_path": img_path,
            "img_name": img_name,
            "img_w": w,
            "img_h": h,
            "bbox": data["bbox"],
            "class": data["type"]
        })

    if not valid_data:
        raise ValueError("‚ùå –ù–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é!")

    class_names = sorted(all_types)
    class_to_id = {name: idx for idx, name in enumerate(class_names)}
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤: {len(class_names)} ‚Üí {class_names}")
    print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(valid_data)}")

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/val
    random.seed(42)  # –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    random.shuffle(valid_data)
    split_idx = int(len(valid_data) * split_ratio)
    train_data = valid_data[:split_idx]
    val_data = valid_data[split_idx:]

    def save_subset(data_list, subset):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö (train –∏–ª–∏ val) –≤ —Ñ–æ—Ä–º–∞—Ç–µ YOLO."""
        (output_dir / 'images' / subset).mkdir(parents=True, exist_ok=True)
        (output_dir / 'labels' / subset).mkdir(parents=True, exist_ok=True)

        for item in data_list:
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            shutil.copy(item["img_path"], output_dir / 'images' / subset / item["img_name"])

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bbox: [x1, y1, x2, y2] ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π YOLO-—Ñ–æ—Ä–º–∞—Ç
            x1, y1, x2, y2 = item["bbox"]
            img_w, img_h = item["img_w"], item["img_h"]

            x_center = ((x1 + x2) / 2) / img_w
            y_center = ((y1 + y2) / 2) / img_h
            width = (x2 - x1) / img_w
            height = (y2 - y1) / img_h

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if not (0 <= x_center <= 1 and 0 <= y_center <= 1 and 0 < width <= 1 and 0 < height <= 1):
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π bbox –≤ {item['json_path']}: "
                      f"–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ({x_center:.3f}, {y_center:.3f}, {width:.3f}, {height:.3f})")
                continue

            class_id = class_to_id[item["class"]]
            label_path = output_dir / 'labels' / subset / (Path(item["img_name"]).stem + ".txt")
            with open(label_path, 'w') as f:
                f.write(f"{class_id} {x_center:.6f} {y_center:.6f} {width:.6f} {height:.6f}\n")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º train –∏ val
    save_subset(train_data, "train")
    save_subset(val_data, "val")

    # –°–æ–∑–¥–∞—ë–º dataset.yaml —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç—ë–º
    yaml_content = f"""path: ./yolo_dataset
train: images/train
val: images/val

nc: {len(class_names)}
names: {class_names}
"""
    with open(output_dir / "dataset.yaml", "w", encoding='utf-8') as f:
        f.write(yaml_content)

    print(f"\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_dir.absolute()}")
    print(f"üìä Train: {len(train_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"üìä Val: {len(val_data)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")


# === –ù–ê–°–¢–†–û–ô–ö–ò ===
IMAGES_DIR = "data/resized_yolo"   # –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —Ä–µ—Å–∞–π–∑–∞)
JSONS_DIR = "data/json"           # –ü–∞–ø–∫–∞ —Å –≤–∞—à–∏–º–∏ JSON-–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
OUTPUT_DIR = "yolo_dataset"       # –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è YOLO-–¥–∞—Ç–∞—Å–µ—Ç–∞

if __name__ == "__main__":
    custom_json_to_yolo(IMAGES_DIR, JSONS_DIR, OUTPUT_DIR, split_ratio=0.8)


