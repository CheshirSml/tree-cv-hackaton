"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ROI —Å—Ç–≤–æ–ª–æ–≤ –¥–µ—Ä–µ–≤—å–µ–≤ –¢–û–õ–¨–ö–û —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–æ—Ä–æ–¥–æ–π.

–¶–µ–ª—å: –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ—Ä–æ–¥—ã.
–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å "–ø–æ—Ä–æ–¥–∞ = –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ".

–†–µ–∑—É–ª—å—Ç–∞—Ç:
- –ü–∞–ø–∫–∞ rois_breed/
- –§–∞–π–ª labels.csv —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: file, breed
"""

import cv2
import numpy as np
import pandas as pd
from pathlib import Path
from lxml import etree
from shapely.geometry import Polygon
from ultralytics import YOLO


# ==============================
# 1. –ü–ê–†–°–ò–ù–ì –¢–û–õ–¨–ö–û –ü–û–†–û–î–´ –ò–ó CVAT XML
# ==============================

def parse_breeds_from_cvat(xml_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–∏–≥–æ–Ω—ã —Å—Ç–≤–æ–ª–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –ø–æ—Ä–æ–¥–æ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: { "img_name.jpg": [ { "points": [...], "breed": "–±–µ—Ä—ë–∑–∞" }, ... ] }
    """
    tree = etree.parse(xml_path)
    root = tree.getroot()
    annotations = {}

    for image in root.findall('image'):
        img_name = Path(image.get('name')).name
        valid_trunks = []

        for poly in image.findall('polygon'):
            if poly.get('label') != '—Å—Ç–≤–æ–ª':
                continue

            # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç "–ø–æ—Ä–æ–¥–∞"
            breed = None
            for attr in poly.findall('attribute'):
                if attr.get('name') == '–ø–æ—Ä–æ–¥–∞':
                    breed = attr.text
                    break

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ—Ä–æ–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            if breed is None or breed == "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ":
                continue

            # –ü–∞—Ä—Å–∏–º —Ç–æ—á–∫–∏
            points_str = poly.get('points')
            coords = []
            for pt in points_str.split(';'):
                x, y = pt.split(',')
                coords.append([float(x), float(y)])
            points = np.array(coords)

            valid_trunks.append({
                'points': points,
                'breed': breed
            })

        if valid_trunks:
            annotations[img_name] = valid_trunks

    return annotations


# ==============================
# 2. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================

def mask_to_polygon(mask):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–∏–Ω–∞—Ä–Ω—É—é –º–∞—Å–∫—É –≤ –ø–æ–ª–∏–≥–æ–Ω (Shapely)."""
    contours, _ = cv2.findContours(
        mask.astype(np.uint8),
        cv2.RETR_EXTERNAL,
        cv2.CHAIN_APPROX_SIMPLE
    )
    if not contours:
        return None
    largest_contour = max(contours, key=cv2.contourArea)
    if len(largest_contour) < 3:
        return None
    return Polygon(largest_contour.reshape(-1, 2))


def compute_iou(poly1, poly2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç IoU –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏."""
    if not poly1 or not poly2 or not poly1.is_valid or not poly2.is_valid:
        return 0.0
    try:
        inter = poly1.intersection(poly2).area
        union = poly1.area + poly2.area - inter
        return inter / union if union > 0 else 0.0
    except:
        return 0.0


def extract_roi_from_mask(image, mask, output_size=(224, 224)):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ROI –ø–æ –º–∞—Å–∫–µ: –æ–±—Ä–µ–∑–∞–µ—Ç, –º–∞—Å–∫–∏—Ä—É–µ—Ç —Ñ–æ–Ω, —Ä–µ—Å–∞–π–∑–∏—Ç.
    """
    coords = np.column_stack(np.where(mask))
    if coords.size == 0:
        return None
    y_min, x_min = coords.min(axis=0)
    y_max, x_max = coords.max(axis=0)

    roi_img = image[y_min:y_max+1, x_min:x_max+1]
    roi_mask = mask[y_min:y_max+1, x_min:x_max+1]

    roi_masked = roi_img.copy()
    roi_masked[~roi_mask] = 0  # —Ñ–æ–Ω ‚Üí —á—ë—Ä–Ω—ã–π

    return cv2.resize(roi_masked, output_size, interpolation=cv2.INTER_LINEAR)


# ==============================
# 3. –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ==============================

def extract_rois_for_breed(
    model_path,
    xml_path,
    img_dir,
    output_dir,
    iou_thresh=0.4,
    output_size=(224, 224)
):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω: —Ç–æ–ª—å–∫–æ –ø–æ—Ä–æ–¥–∞ ‚Üí ROI.
    """
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLOv11n-seg...")
    model = YOLO(model_path)

    print("–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Ä–æ–¥ –∏–∑ CVAT XML...")
    breed_anns = parse_breeds_from_cvat(xml_path)

    output_dir = Path(output_dir)
    rois_dir = output_dir / "rois_breed"
    rois_dir.mkdir(parents=True, exist_ok=True)

    labels = []
    roi_id = 0

    img_dir = Path(img_dir)
    total_imgs = len(breed_anns)
    print(f"–ù–∞–π–¥–µ–Ω–æ {total_imgs} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –ø–æ—Ä–æ–¥–æ–π.")

    for i, (img_name, trunks) in enumerate(breed_anns.items(), 1):
        print(f"[{i}/{total_imgs}] –û–±—Ä–∞–±–æ—Ç–∫–∞ {img_name}...")

        img_path = img_dir / img_name
        if not img_path.exists():
            continue

        orig_img = cv2.imread(str(img_path))
        if orig_img is None:
            continue
        h, w = orig_img.shape[:2]

        # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å YOLO
        results = model(str(img_path))
        if not results[0].masks:
            continue

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å–∫–∏ YOLO –≤ –ø–æ–ª–∏–≥–æ–Ω—ã
        yolo_masks = []
        for mask_tensor in results[0].masks.data:
            mask_np = mask_tensor.cpu().numpy()
            mask_full = cv2.resize(mask_np, (w, h), interpolation=cv2.INTER_NEAREST)
            poly = mask_to_polygon(mask_full > 0.5)
            yolo_masks.append((mask_full, poly))

        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ IoU
        for trunk in trunks:
            cvat_poly = Polygon(trunk['points'])
            best_iou, best_mask = 0, None

            for mask_full, yolo_poly in yolo_masks:
                iou = compute_iou(cvat_poly, yolo_poly)
                if iou > best_iou:
                    best_iou = iou
                    best_mask = mask_full

            if best_iou >= iou_thresh and best_mask is not None:
                roi = extract_roi_from_mask(orig_img, best_mask > 0.5, output_size)
                if roi is not None:
                    roi_file = f"breed_{roi_id:05d}.jpg"
                    cv2.imwrite(str(rois_dir / roi_file), roi)
                    labels.append({'file': roi_file, 'breed': trunk['breed']})
                    roi_id += 1

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if labels:
        df = pd.DataFrame(labels)
        df.to_csv(output_dir / "labels.csv", index=False, encoding='utf-8')
        print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(labels)} ROI —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–æ—Ä–æ–¥–æ–π.")
        print(f"üìÅ ROI: {rois_dir}/")
        print(f"üìä –ú–µ—Ç–∫–∏: {output_dir}/labels.csv")
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ—Ä–æ–¥–∞–º
        print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ä–æ–¥–∞–º:")
        print(df['breed'].value_counts().to_string())
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–≤–æ–ª–∞ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –ø–æ—Ä–æ–¥–æ–π.")


# ==============================
# 4. –ó–ê–ü–£–°–ö
# ==============================

if __name__ == "__main__":
    # === –ù–ê–°–¢–†–û–ô–¢–ï –ü–£–¢–ò ===
    MODEL_PATH = "_ROI extractor/yolo-segmentation build 2.8.pt"               # –≤–∞—à–∞ YOLOv11n-seg –º–æ–¥–µ–ª—å
    XML_PATH = "_ROI extractor/CVATforIMAGES_part_9/annotations.xml"         # —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ CVAT
    IMG_DIR = "_ROI extractor/CVAT backup part_9/data"                   # –ø–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    OUTPUT_DIR = "breed_classification_dataset"  # –≤—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞

    extract_rois_for_breed(
        model_path=MODEL_PATH,
        xml_path=XML_PATH,
        img_dir=IMG_DIR,
        output_dir=OUTPUT_DIR,
        iou_thresh=0.4,
        output_size=(224, 224)
    )